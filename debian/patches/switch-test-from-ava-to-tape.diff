Description: switch test from ava to tape
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2019-08-28

--- a/test.js
+++ b/test.js
@@ -1,10 +1,11 @@
-import test from 'ava';
+const test = require('tape');
 
 Object.assign = require('./');
 const objectAssign = require('./');
 
 test('have the correct length', t => {
 	t.is(objectAssign.length, 2);
+  t.end();
 });
 
 test('throw when target is not an object', t => {
@@ -14,6 +15,7 @@
 	t.throws(() => {
 		objectAssign(undefined);
 	}, TypeError);
+  t.end();
 });
 
 test('objectAssign own enumerable properties from source to target object', t => {
@@ -26,6 +28,7 @@
 		foo: 0,
 		bar: 1
 	});
+  t.end();
 });
 
 test('throw on null/undefined target', t => {
@@ -40,20 +43,22 @@
 	t.throws(() => {
 		objectAssign(undefined, undefined);
 	});
+  t.end();
 });
 
 test('not throw on null/undefined sources', t => {
-	t.notThrows(() => {
+	t.doesNotThrow(() => {
 		objectAssign({}, null);
 	});
 
-	t.notThrows(() => {
+	t.doesNotThrow(() => {
 		objectAssign({}, undefined);
 	});
 
-	t.notThrows(() => {
+	t.doesNotThrow(() => {
 		objectAssign({}, undefined, null);
 	});
+  t.end();
 });
 
 test('support multiple sources', t => {
@@ -62,6 +67,7 @@
 		bar: 2
 	});
 	t.deepEqual(objectAssign({}, {}, {foo: 1}), {foo: 1});
+  t.end();
 });
 
 test('only iterate own keys', t => {
@@ -74,18 +80,21 @@
 		foo: 1,
 		bar: 1
 	});
+  t.end();
 });
 
 test('return the modified target object', t => {
 	const target = {};
 	const returned = objectAssign(target, {a: 1});
 	t.is(returned, target);
+  t.end();
 });
 
 test('support `Object.create(null)` objects', t => {
 	const obj = Object.create(null);
 	obj.foo = true;
 	t.deepEqual(objectAssign({}, obj), {foo: true});
+  t.end();
 });
 
 test('preserve property order', t => {
@@ -96,6 +105,7 @@
 	});
 	const target = objectAssign({}, source);
 	t.is(Object.keys(target).join(''), letters);
+  t.end();
 });
 
 test('accept primitives as target', t => {
@@ -103,6 +113,7 @@
 	const strObj = Object('abcdefg');
 	strObj.foo = 'bar';
 	t.deepEqual(target, strObj);
+  t.end();
 });
 
 if (typeof global.Symbol !== 'undefined') {
@@ -113,6 +124,7 @@
 		source[sym] = 'bar';
 		objectAssign(target, source);
 		t.is(target[sym], 'bar');
+    t.end();
 	});
 
 	test('only copy enumerable symbols', t => {
@@ -125,5 +137,6 @@
 		});
 		objectAssign(target, source);
 		t.is(target[sym], undefined);
+    t.end();
 	});
 }
